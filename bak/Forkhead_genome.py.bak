
from intermine.webservice import Service
service = Service("http://yeastmine.yeastgenome.org/yeastmine/service")

# Get a new query on the class (table) you will be querying:
query = service.new_query("Chromosome")

# The view specifies the output columns
query.add_view("primaryIdentifier", "sequence.residues")

# Uncomment and edit the line below (the default) to select a custom sort order:
# query.add_sort_order("Chromosome.primaryIdentifier", "ASC")
#chrIII = 'GATTACAGGGAATTTGTTTAATAGCAATTTATACGCTTTGTTATCGGCACCACCAAATTCTGGGATAACCGTTAATTCTTCCTCAGGTTTGCCTAGTGGATCCTCTCCTTCTGGAGTTTGGCCACGCTCTGGCTTTTCGATCAGACTTGGCATGTGACTAATCAAGTATGGCATGCTGGTTTTTGGGTCCTTTGTTTTCGTTGTTTCAGTCTGGATAAATTTTAAGTTACCATTATCGAAGGCACTTTTGTACTTGTCACTAATTAAAGATGCAATGTCAGCGGGGATACTCATTTTTATTTTAATTTTTACTTTTCTGTTTGTTCTAAAATCTATCTAAACTGGCTTTCAAGATCAATCTATTGTCTTTTAAGGTAAACTTTAAATTGGAAATAATAGTAATGTTAGTTCCTTCATTTTAACCTTGTATTGTATTTCCTTTGCGTGATGAAAAAAAAACTGAAAAAGAGAAAAATAAGAAAATCTTCTAGAACGTTCCGAAACAGGACACTTAGCACACAAATACAGAATAGGAAAGTAAAAGGCAATATATGAATGCAGTGCTTGTAACTGGTGCTTGTATCCAAGAATAGCTTCTTGCTGTAGGTTATGGGAATATCGTGTAAGCTGGGGTGACTTTTGAGCTATTCGCGACGCCCGACGCCGTAATAACTACTTTCGACAGACCACTTATGACAGTATTTCAGGCCGCTCTTATAAAATGACATGTTAACAAACAGTTCTGATTATTCGCCTTTTGACAGGACGATAATGTAAATAGTTGTGGTAGTATCATTCAGGTATGTAACTGTTTACTTTGTATCGCTTGAAAAAAATAAGCATTTCAGAGCCTTCTTTGGAGCTCAAGTGGATTGAGGCCACAGCAAGACCGGCCAGTTTGAATGCTCAACTCTTCAAAAGAAATTCCTCAAATATGTCCAGTTTCATGTACTGTCCGGTGTGATTTATTATTTTTTATTTACTTTGTAGTTCTTAAAGCTAAGATTTTTTTCTTTGATAAATTCTTGTTTTCATATCCTAAAATTAAAGGGAAAATAAACAATACATAACAAAACATATAAAAACCAACACAATAAAAAAAAGGATCAAATACTCATTAAAGTAACTTACACGGGGGCTAAAAACGGAGTTTGATGAATATTCACAAGATAAAAATCATATGTATGTTTCTGATATATCGATATACAATCAAACACTTTCAAGAATTTGTTTGTAGACTTTTTGCTAGAGACCTCATCAAAGTGCTACCAACTAAGATCAACTTATACTTCTTTTAGAGAAAATTTTTTTCAATGTACTCCAAAGAGATTTAGATCCTGTCTCTTCCTCTTCCTCTTCCTCGAAAGTCAAAGAAAAATCAGAGTCTCCCTGCTTATTCAGGCGGAGAGGCTCTAGGGTAGTTGCGTTTCTCTCATTGGGACACTGAACCTCATTTTCCAACATTTTGGTCATGTAAGAGGCGACAGGCTCATCGCAGGTGGGTGCATCAACATGGTAGTACCTGGACCAAGCGCTACATTGAGTCCCTCCTGGATAAACACCGCTACAATATTGTCTTTGGACGTTTGCCCAAACCATATCTTTTGAATACCAAAGCTGGACCACATTGTATGGCCTAATCATTGGTGCTACCATAATACTGGATTGGGAAACAGTCTGGTTAATTTTTTTCAACCAATTTTTCTTATCTAGCAATGATTTAATAAACCTGAAATCTAAATTGTCTTCGTTAGCGTCTGTGTCATAATCTACAATTGAGTACTGTGACGTCCAATTATATGGCACCGAGATGGGGAATCTGTCCGGTGTTTCGTCGCTGTTATCCTTCTCCTCCCTCCAAATGCAGTCAGAGGCAGGTGCCCATTCGGTTCGCCAGTCTCCGTTATTTACTACTTGGTACTGTTCCCAATCGTAATACGTTTCCTCTGGGTTGAAGATACTTGCTCTGCTCTTGACATTGCCCATAGCCACACCACGAGAAACATCGTGGAAGATTACGGAGCTGTTTACGATAGCAGGAGCAATGGATTTGACGAATGACACTTGATAAAAGTCTTTGGTCGAAAA'

chromosome = ''
for row in query.rows():
    if row["primaryIdentifier"] == 'chrIII':
        chromosome = row["sequence.residues"]

def rev_comp(dna):
    comp = ''
    for nucl in dna:
        if nucl == 'A':
            comp = comp + 'T'
        elif nucl == 'T':
            comp = comp + 'A'
        elif nucl == 'C':
            comp = comp + 'G'
        elif nucl == 'G':
            comp = comp + 'C'
        else:
            print 'Not a DNA sequence'

    rev_comp = comp[::-1]
    return rev_comp

chromosome_rev = rev_comp(chromosome)

#TRTTTAY
#pattern = '(.{25}T[AG]TTTA[CT].{72}[AG]TAAA[CT]A){e<=2}'
#pattern = '(.{25}T[AG]TTTA[CT].{72}T[AG]TTTA[CT]){e<=2}'
#pattern = '(.{25}[AG]TAAA[CT]A.{72}T[AG]TTTA[CT]){e<=2}'
pattern = '(.{25}[AG]TAAA[CT]A.{72}[AG]TAAA[CT]A){e<=2}'

#seq = 'AAACAGGACACTTAGCACACAAATACAGAATAGGAAAGTAAAAGGCAATATATGAATGCAGTGCTTGTAACTGGTGCTTGTATCCAAGAATAGCTTCTTGCTGTAGGTTATGGGAATATCGTGTAAGCTGGGGTGACTTTTGAGCTATTCGCGACGCCCGACGCCGTAATAACTACTTTCGACAGACCACTTATGACAGTATTTCAGGCCGCTCTTATAAAATGACATGTTAACAAACAGTTCTGATTATTCGCCTTTTGACAGGACGATAATGTAAATAGTTGTGGTAGTATCATTCAGGTATGTAACTGTTTACTTTGTATCGCTTGAAAAAAATAAGCATTTCAGAGCCTTCTTTGGAGCTCAAGTGGATTGAGGCCACAGCAAGACCGGCCAGTTTGAATGCTCAACTCTTCAAAAGAAATTCCTCAAATATGTCCAGTTTCATGTACTGTCCGGTGTGATTTATTATTTTTTATTTACTTTGTAGTTCTTAAAGCTAAGATTTTTTTCTTTGATAAATTCTTGTTTTCATATCCTAAAATTAAAGGGAAAATAAACAATACATAACAAAACATATAAAAACCAACACAATAAAAAAAAGGATCAAATACTCATTAAAGTAACTTACACGGGGGCTAAAAACGGAGTTTGATGAATATTCACAAGATAAAAATCATATGTATGTTTCTGATATATCGATATACAATCAAACACTTTCAAGAATTTGTTTGTAGACTTTTTGCTAGAGACCTCATCAAAGTGCTACCAACTAAGATCAACTTATACTTCTTTTAGAGAAAATTTTTTTCAATGTACTCCAAAGAGATTTAGATCCTGTCTCTTCCTCTTCCTCTTCCTCGAAAGTCAAAGAAAAATCAGAGTCTCCCTGCTTATTCAGGCGGAGAGGCTCTAGGGTAGTTGCGTTTCTCTCATTGGGACACTGAACCTCATTTTCCAACATTTTGGTCATGTAAGAGGCGACAGGCTCATCGCAGGTGGGTGCATCAACATGGTAGTACCTGGACCAAGCGCTACATTGAGTCCCTCCTGGATAAACACCGCTACAATATTGTCTTTGGACGTTT'
#seq_rev = rev_comp(seq)
watson_finds = []
crick_finds = []

def find_pattern(pattern,seq):
    import regex
    find = regex.findall(pattern, seq)
    return find



watson_finds =  find_pattern(pattern, chromosome)
crick_finds = find_pattern(pattern, chromosome_rev)
#WWWWTTTAYRTTTWGTT
acs = '([ATC][ATC][AT][AT]TTTA[TC][AG]TTT[AT]GTT){e<=1}'
#acs = '(TTG[AT]TTT[AG][TC]ATTT[AT][AT][ATC][ATC]){e<=1}'
#acs = '(AAC[TA]AAA[CT][GA]TAAA[AT][AT][GAT][GAT]){e<=1}'
#acs = 'TTATATGTTTT'
#acs = 'AAAACATATAA'
import regex
potential_origins = []

for a in watson_finds:
    filtered_watson = []
    a = str(a)
    filtered_watson = regex.findall(acs, a)
    if len(filtered_watson) > 0:
        potential_origins.append(str(a))

for a in crick_finds:
    filtered_crick = []
    a = str(a)
    filtered_crick = regex.findall(acs, a)
    if len(filtered_crick) > 0:
        potential_origins.append(a)

print potential_origins

motif_start_pos = []
motif_len = []
def find_motif(motif,seq):
    global motif_start_pos, motif_end_pos
    for a in range(0, len(seq)):
        slice = seq[a:a+len(motif)]
        if slice == motif:
            motif_start_pos.append(a+1) #+1 because first nuc is 1 not 0
            motif_len.append(len(motif))
    #prints start postitions of motifs in the seq string
    return motif_start_pos, motif_len

for a in potential_origins:
    find_motif(a,chromosome)

for a in potential_origins:
    a = rev_comp(a)
    find_motif(a,chromosome)

print motif_start_pos
print motif_len

x = list()
y = list()
name = "GSE33677_BrdU_HU_Normalized_Values.txt"
handle = open(name)
for a in handle:
    if not a.startswith('3'):
        continue
    a = a.strip()
    lst = a.split()
    x.append(float(lst[4]))
    y.append(int(lst[1]))

BarHigh = list()
for a in motif_start_pos:
    BarHigh.append((a-a)+max(y))

BarLow = list()
for a in motif_start_pos:
    BarLow.append((a-a)-max(y))

import matplotlib.pyplot as plt

plt.plot(y, x, marker='.', linestyle='-', color='b')
plt.bar(motif_start_pos, BarHigh, color='r', width=motif_len)
plt.bar(motif_start_pos, BarLow, color='r', width=motif_len)
plt.axis([min(y), max(y), min(x)-0.1, max(x)+0.1])
plt.xlabel('chromosome')
plt.ylabel('signal')
plt.show()
